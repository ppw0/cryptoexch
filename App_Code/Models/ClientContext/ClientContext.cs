//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Client
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Client()
        {
            this.Orders = new HashSet<Order>();
            this.Transactions = new HashSet<Transaction>();
            this.Wallets = new HashSet<Wallet>();
        }
    
        public string ID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
        public string BankAccount { get; set; }
        public bool Verified { get; set; }
        public string Doc1URI { get; set; }
        public string Doc2URI { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Transaction> Transactions { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Wallet> Wallets { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Currency
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Currency()
        {
            this.Transactions = new HashSet<Transaction>();
            this.Wallets = new HashSet<Wallet>();
        }
    
        public int ID { get; set; }
        public string Ticker { get; set; }
        public string Name { get; set; }
        public string Symbol { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Transaction> Transactions { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Wallet> Wallets { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class CurrencyPair
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public CurrencyPair()
        {
            this.Orders = new HashSet<Order>();
        }
    
        public int ID { get; set; }
        public int FirstCurrencyID { get; set; }
        public int SecondCurrencyID { get; set; }
        public string Heading { get; set; }
        public double Last { get; set; }
        public double Open { get; set; }
        public double High { get; set; }
        public double Low { get; set; }
        public double C24hours { get; set; }
        public string Change { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Order
    {
        public int ID { get; set; }
        public string ClientID { get; set; }
        public int CurrencyPairID { get; set; }
        public System.DateTimeOffset Beginning { get; set; }
        public string Type { get; set; }
        public double Amount { get; set; }
        public double Limit { get; set; }
        public double Total { get; set; }
        public Nullable<System.DateTimeOffset> Expiration { get; set; }
        public string EndType { get; set; }
    
        public virtual Client Client { get; set; }
        public virtual CurrencyPair CurrencyPair { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Transaction
    {
        public int ID { get; set; }
        public string ClientID { get; set; }
        public int CurrencyID { get; set; }
        public System.DateTimeOffset Timestamp { get; set; }
        public string Type { get; set; }
        public double Amount { get; set; }
        public Nullable<double> Fee { get; set; }
    
        public virtual Client Client { get; set; }
        public virtual Currency Currency { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class Wallet
    {
        public int ID { get; set; }
        public string ClientID { get; set; }
        public int CurrencyID { get; set; }
        public string Address { get; set; }
        public Nullable<double> Balance { get; set; }
    
        public virtual Client Client { get; set; }
        public virtual Currency Currency { get; set; }
    }
}
namespace Cryptoexch.Models
{
    using System;
    
    public partial class ClientPortfolioView_Result
    {
        public string Name { get; set; }
        public string Balance { get; set; }
    }
}
